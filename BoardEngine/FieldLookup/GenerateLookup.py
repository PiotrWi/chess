colors = ["white", "black"]

BaseTemplate = """// File is generated by FieldLookup.py
// In order to change it please modify FieldLookup.py
// run it
// and overlap FieldLookup.hpp by tmp_FieldLookup.hpp

#pragma once

#include <publicIf/Notation.hpp>

template <NOTATION::COLOR::color color, unsigned char kingPosition>
struct FieldLookup
{
    static constexpr unsigned char OppositePawnPositionsSize = 0u;
    static constexpr unsigned char OppositePawnPositions[1] = {};

    static constexpr unsigned char KingPossibleMovesSize = 0u;
    static constexpr unsigned char KingPossibleMoves[1] = {};
    
    static constexpr unsigned char KnightPossibleMovesSize = 0u;
    static constexpr unsigned char KnightPossibleMoves[1] = {};

    static constexpr unsigned char TopPossibleMovesSize = 0u;
    static constexpr unsigned char TopPossibleMoves[1] = {};

    static constexpr unsigned char BottomPossibleMovesSize = 0u;
    static constexpr unsigned char BottomPossibleMoves[1] = {};

    static constexpr unsigned char LeftPossibleMovesSize = 0u;
    static constexpr unsigned char LeftPossibleMoves[1] = {};

    static constexpr unsigned char RightPossibleMovesSize = 0u;
    static constexpr unsigned char RightPossibleMoves[1] = {};

    static constexpr unsigned char TopLeftPossibleMovesSize = 0u;
    static constexpr unsigned char TopLeftPossibleMoves[1] = {};

    static constexpr unsigned char TopRightPossibleMovesSize = 0u;
    static constexpr unsigned char TopRightPossibleMoves[1] = {};
    
    static constexpr unsigned char BottomLeftPossibleMovesSize = 0u;
    static constexpr unsigned char BottomLeftPossibleMoves[1] = {};

    static constexpr unsigned char BottomRightPossibleMovesSize = 0u;
    static constexpr unsigned char BottomRightPossibleMoves[1] = {};
};"""


def get_row_col(pos):
    return pos // 8, pos % 8


def get_position(row_col):
    return row_col[0] * 8 + row_col[1]


def is_valid_pos(row_col):
    return row_col[0] >= 0 and row_col[0] < 8 and row_col[1] >= 0 and row_col[1] < 8


def generateOpositePawnsPositions(c, pos):
    positions = []

    king_pos = get_row_col(pos)

    if c == "white":
        if pos >= 48:
            return []
        left_pawn = [king_pos[0]+1, king_pos[1]-1]
        if is_valid_pos(left_pawn):
            positions.append(get_position(left_pawn))
        right_pawn = [king_pos[0]+1, king_pos[1]+1]
        if is_valid_pos(right_pawn):
            positions.append(get_position(right_pawn))
    if c == "black":
        if pos < 16:
            return []
        left_pawn = [king_pos[0]-1, king_pos[1]-1]
        if is_valid_pos(left_pawn):
            positions.append(get_position(left_pawn))
        right_pawn = [king_pos[0]-1, king_pos[1]+1]
        if is_valid_pos(right_pawn):
            positions.append(get_position(right_pawn))

    return positions


def generateKingPositions(pos):
    positions = []

    for positionDiff in [ [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1] ]:
        row_col = get_row_col(pos)
        king_pos = [row_col[0] + positionDiff[0], row_col[1] + positionDiff[1]]
        if is_valid_pos(king_pos):
            positions.append(get_position(king_pos))
    return positions


def generateKnightPositions(pos):
    positions = []

    for positionDiff in [ [1, -2], [2, -1], [2, 1], [1, 2], [-1, 2], [-2, 1], [-2, -1], [-1, -2] ]:
        row_col = get_row_col(pos)
        knight_pos = [row_col[0] + positionDiff[0], row_col[1] + positionDiff[1]]
        if is_valid_pos(knight_pos):
            positions.append(get_position(knight_pos))
    return positions


def generateLines(pos):
    positions = []
    for positionDiff in [["BottomLeft", -1, -1], ["BottomRight",-1, 1], ["TopLeft", 1, -1], ["TopRight", 1, 1], ["Bottom", -1, 0], ["Top", 1, 0], ["Left", 0, -1], ["Right", 0, 1]]:
        positions.append([positionDiff[0], []])
        row_col = get_row_col(pos)
        eval_pos = [row_col[0] + positionDiff[1], row_col[1] + positionDiff[2]]
        while is_valid_pos(eval_pos):
            positions[-1][1].append(get_position(eval_pos))
            eval_pos = [eval_pos[0] + positionDiff[1], eval_pos[1] + positionDiff[2]]
    return positions


def writeSingleLine(f, prefix, list):
    f.write("    static constexpr unsigned char {0}PossibleMovesSize = ".format(prefix))
    f.write(str(len(list)))
    f.write(";\n")
    f.write("    static constexpr unsigned char {0}PossibleMoves[".format(prefix))
    f.write(str(max(1, len(list))))
    f.write("] = {")
    f.write(str(list)[1:-1])
    f.write("};\n")



with open("tmp_FieldLookup.hpp", "w") as f:
    f.write(BaseTemplate)
    for c in colors:
        for position in range(0, 64):
            f.write("template <>\n")
            f.write("struct FieldLookup<NOTATION::COLOR::color::")
            f.write(c)
            f.write(", ")
            f.write(str(position))
            f.write(">\n")
            f.write("{\n")

            valid_opposite_pawns_positions = generateOpositePawnsPositions(c, position)
            f.write("    static constexpr unsigned char OppositePawnPositionsSize = ")
            f.write(str(len(valid_opposite_pawns_positions)))
            f.write(";\n")
            f.write("    static constexpr unsigned char OppositePawnPositions[")
            f.write(str(max(1, len(valid_opposite_pawns_positions))))
            f.write("] = {")
            f.write(str(valid_opposite_pawns_positions)[1:-1])
            f.write("};\n")

            valid_king_positions = generateKingPositions(position)
            f.write("    static constexpr unsigned char KingPossibleMovesSize = ")
            f.write(str(len(valid_king_positions)))
            f.write(";\n")
            f.write("    static constexpr unsigned char KingPossibleMoves[")
            f.write(str(max(1, len(valid_king_positions))))
            f.write("] = {")
            f.write(str(valid_king_positions)[1:-1])
            f.write("};\n")

            valid_knight_positions = generateKnightPositions(position)
            f.write("    static constexpr unsigned char KnightPossibleMovesSize = ")
            f.write(str(len(valid_knight_positions)))
            f.write(";\n")
            f.write("    static constexpr unsigned char KnightPossibleMoves[")
            f.write(str(max(1, len(valid_knight_positions))))
            f.write("] = {")
            f.write(str(valid_knight_positions)[1:-1])
            f.write("};\n")

            lines = generateLines(position)
            for line in lines:
                writeSingleLine(f, line[0], line[1])
            f.write("};\n")
